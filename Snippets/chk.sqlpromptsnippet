<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>chk</Title>
      <Shortcut>chk</Shortcut>
      <Description>Testing the Performance of Individual SQL Statements within a Batch</Description>
      <Author />
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations />
      <Code Language="sql"><![CDATA[IF EXISTS --if the session already exists, then delete it. We are assuming you've changed something
(
    SELECT *
    FROM   sys.server_event_sessions
    WHERE  name = 'CheckingSPsAndSQLStatements'
)
    DROP EVENT SESSION CheckingSPsAndSQLStatements ON SERVER;
GO
CREATE EVENT SESSION CheckingSPsAndSQLStatements --call it what you wish, of course
ON SERVER
    ADD EVENT sqlserver.sql_statement_completed --we just have one event
    (ACTION (
                sqlserver.database_name
              , sqlserver.sql_text
              , sqlserver.plan_handle
            ) -- and these global vars
     WHERE (sqlserver.like_i_sql_unicode_string(sqlserver.sql_text, N'--Test these queries%'))
    --we just want the batch and nothing else so we put an identifying string at the start
    )
  , ADD EVENT sqlserver.sp_statement_completed
    (ACTION (
                sqlserver.database_name
              , sqlserver.sql_text
              , sqlserver.plan_handle
            )
     WHERE (sqlserver.like_i_sql_unicode_string(sqlserver.sql_text, N'--Test these queries%'))
    )
  , ADD EVENT sqlserver.sql_batch_completed
    (ACTION (
                sqlserver.database_name
              , sqlserver.sql_text
              , sqlserver.plan_handle
            )
     WHERE (sqlserver.like_i_sql_unicode_string(sqlserver.sql_text, N'--Test these queries%'))
    )
    ADD TARGET package0.ring_buffer
--we don't need a more permanent record or a bucket count
WITH (
         STARTUP_STATE = OFF
     );
GO
ALTER EVENT SESSION CheckingSPsAndSQLStatements
ON SERVER STATE = START;
--V-----The Batch being tested starts here ------V
GO
--don't change this next line without changing the WHERE clause above
--Test these queries
-------------------------------------------------------------------
$SELECTEDTEXT$
------------------------------------------------------------------
GO
DECLARE @Target_Data XML = (
                               SELECT    TOP 1
                                         CAST(xet.target_data AS XML) AS targetdata
                               FROM
                                         sys.dm_xe_session_targets AS xet
                              INNER JOIN sys.dm_xe_sessions        AS xes
                                      ON xes.address = xet.event_session_address
                               WHERE
                                         xes.name        = 'CheckingSPsAndSQLStatements'
                                     AND xet.target_name = 'ring_buffer'
                           );
SELECT
            the.event_data.value ('(@name)[1]', 'varchar(80)')
          , CONVERT (DATETIME2, SWITCHOFFSET (CONVERT (DATETIMEOFFSET, the.event_data.value ('(@timestamp)[1]', 'datetime2')), DATENAME (TzOffset, SYSDATETIMEOFFSET ())))         AS datetime_local
          , CONVERT (DECIMAL (6, 3), ROUND (the.event_data.value ('(data[@name="duration"]/value)[1]', 'bigint') / 1000000.0, 3, 1))                                               AS duration
          , COALESCE (the.event_data.value ('(data[@name="statement"]/value)[1]', 'nvarchar(max)'), the.event_data.value ('(data[@name="batch_text"]/value)[1]', 'nvarchar(max)')) AS SQL
          , COALESCE (qp.query_plan, '')                                                                                                                                           AS [Query PLAN]
          , the.event_data.value ('(data[@name="cpu_time"]/value)[1]', 'bigint')                                                                                                   AS [cpu_time(microsSecs)]
          , the.event_data.value ('(data[@name="physical_reads"]/value)[1]', 'bigint')                                                                                             AS physical_reads
          , the.event_data.value ('(data[@name="logical_reads"]/value)[1]', 'bigint')                                                                                              AS logical_reads
          , the.event_data.value ('(data[@name="writes"]/value)[1]', 'bigint')                                                                                                     AS writes
          , the.event_data.value ('(data[@name="row_count"]/value)[1]', 'bigint')                                                                                                  AS row_count
FROM
            @Target_Data.nodes('//RingBufferTarget/event') AS the(event_data)
OUTER APPLY sys.dm_exec_query_plan (CONVERT (   VARBINARY (64) --convert to valid plan handle
                                              , '0x' + event_data.value ('(action[@name="plan_handle"]/value)[1]', 'nvarchar(max)'), 1
                                            )
                                   )                       AS qp;
ALTER EVENT SESSION CheckingSPsAndSQLStatements ON SERVER STATE = STOP;]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
{
  "id": "a826efbe-7323-4f17-9868-2d370ff587a9",
  "name": "chk",
  "prefix": "chk",
  "description": "Testing the Performance of Individual SQL Statements within a Batch",
  "body": "IF EXISTS --if the session already exists, then delete it. We are assuming you've changed something\n(\n    SELECT *\n    FROM   sys.server_event_sessions\n    WHERE  name = 'CheckingSPsAndSQLStatements'\n)\n    DROP EVENT SESSION CheckingSPsAndSQLStatements ON SERVER;\nGO\nCREATE EVENT SESSION CheckingSPsAndSQLStatements --call it what you wish, of course\nON SERVER\n    ADD EVENT sqlserver.sql_statement_completed --we just have one event\n    (ACTION (\n                sqlserver.database_name\n              , sqlserver.sql_text\n              , sqlserver.plan_handle\n            ) -- and these global vars\n     WHERE (sqlserver.like_i_sql_unicode_string(sqlserver.sql_text, N'--Test these queries%'))\n    --we just want the batch and nothing else so we put an identifying string at the start\n    )\n  , ADD EVENT sqlserver.sp_statement_completed\n    (ACTION (\n                sqlserver.database_name\n              , sqlserver.sql_text\n              , sqlserver.plan_handle\n            )\n     WHERE (sqlserver.like_i_sql_unicode_string(sqlserver.sql_text, N'--Test these queries%'))\n    )\n  , ADD EVENT sqlserver.sql_batch_completed\n    (ACTION (\n                sqlserver.database_name\n              , sqlserver.sql_text\n              , sqlserver.plan_handle\n            )\n     WHERE (sqlserver.like_i_sql_unicode_string(sqlserver.sql_text, N'--Test these queries%'))\n    )\n    ADD TARGET package0.ring_buffer\n--we don't need a more permanent record or a bucket count\nWITH (\n         STARTUP_STATE = OFF\n     );\nGO\nALTER EVENT SESSION CheckingSPsAndSQLStatements\nON SERVER STATE = START;\n--V-----The Batch being tested starts here ------V\nGO\n--don't change this next line without changing the WHERE clause above\n--Test these queries\n-------------------------------------------------------------------\n$SELECTEDTEXT$\n------------------------------------------------------------------\nGO\nDECLARE @Target_Data XML = (\n                               SELECT    TOP 1\n                                         CAST(xet.target_data AS XML) AS targetdata\n                               FROM\n                                         sys.dm_xe_session_targets AS xet\n                              INNER JOIN sys.dm_xe_sessions        AS xes\n                                      ON xes.address = xet.event_session_address\n                               WHERE\n                                         xes.name        = 'CheckingSPsAndSQLStatements'\n                                     AND xet.target_name = 'ring_buffer'\n                           );\nSELECT\n            the.event_data.value ('(@name)[1]', 'varchar(80)')\n          , CONVERT (DATETIME2, SWITCHOFFSET (CONVERT (DATETIMEOFFSET, the.event_data.value ('(@timestamp)[1]', 'datetime2')), DATENAME (TzOffset, SYSDATETIMEOFFSET ())))         AS datetime_local\n          , CONVERT (DECIMAL (6, 3), ROUND (the.event_data.value ('(data[@name=\"duration\"]/value)[1]', 'bigint') / 1000000.0, 3, 1))                                               AS duration\n          , COALESCE (the.event_data.value ('(data[@name=\"statement\"]/value)[1]', 'nvarchar(max)'), the.event_data.value ('(data[@name=\"batch_text\"]/value)[1]', 'nvarchar(max)')) AS SQL\n          , COALESCE (qp.query_plan, '')                                                                                                                                           AS [Query PLAN]\n          , the.event_data.value ('(data[@name=\"cpu_time\"]/value)[1]', 'bigint')                                                                                                   AS [cpu_time(microsSecs)]\n          , the.event_data.value ('(data[@name=\"physical_reads\"]/value)[1]', 'bigint')                                                                                             AS physical_reads\n          , the.event_data.value ('(data[@name=\"logical_reads\"]/value)[1]', 'bigint')                                                                                              AS logical_reads\n          , the.event_data.value ('(data[@name=\"writes\"]/value)[1]', 'bigint')                                                                                                     AS writes\n          , the.event_data.value ('(data[@name=\"row_count\"]/value)[1]', 'bigint')                                                                                                  AS row_count\nFROM\n            @Target_Data.nodes('//RingBufferTarget/event') AS the(event_data)\nOUTER APPLY sys.dm_exec_query_plan (CONVERT (   VARBINARY (64) --convert to valid plan handle\n                                              , '0x' + event_data.value ('(action[@name=\"plan_handle\"]/value)[1]', 'nvarchar(max)'), 1\n                                            )\n                                   )                       AS qp;\nALTER EVENT SESSION CheckingSPsAndSQLStatements ON SERVER STATE = STOP;",
  "placeholders": []
}